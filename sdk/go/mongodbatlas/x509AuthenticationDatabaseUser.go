// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `mongodbatlas_x509_authentication_database_user` provides a X509 Authentication Database User resource. The mongodbatlas_x509_authentication_database_user resource lets you manage MongoDB users who authenticate using X.509 certificates. You can manage these X.509 certificates or let Atlas do it for you.
// 
// | Management  | Description  |
// |---|---|
// | Atlas  | Atlas manages your Certificate Authority and can generate certificates for your MongoDB users. No additional X.509 configuration is required.  |
// | Customer  |  You must provide a Certificate Authority and generate certificates for your MongoDB users. |
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
type X509AuthenticationDatabaseUser struct {
	s *pulumi.ResourceState
}

// NewX509AuthenticationDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewX509AuthenticationDatabaseUser(ctx *pulumi.Context,
	name string, args *X509AuthenticationDatabaseUserArgs, opts ...pulumi.ResourceOpt) (*X509AuthenticationDatabaseUser, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["customerX509Cas"] = nil
		inputs["monthsUntilExpiration"] = nil
		inputs["projectId"] = nil
		inputs["username"] = nil
	} else {
		inputs["customerX509Cas"] = args.CustomerX509Cas
		inputs["monthsUntilExpiration"] = args.MonthsUntilExpiration
		inputs["projectId"] = args.ProjectId
		inputs["username"] = args.Username
	}
	inputs["certificates"] = nil
	inputs["currentCertificate"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &X509AuthenticationDatabaseUser{s: s}, nil
}

// GetX509AuthenticationDatabaseUser gets an existing X509AuthenticationDatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetX509AuthenticationDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *X509AuthenticationDatabaseUserState, opts ...pulumi.ResourceOpt) (*X509AuthenticationDatabaseUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificates"] = state.Certificates
		inputs["currentCertificate"] = state.CurrentCertificate
		inputs["customerX509Cas"] = state.CustomerX509Cas
		inputs["monthsUntilExpiration"] = state.MonthsUntilExpiration
		inputs["projectId"] = state.ProjectId
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &X509AuthenticationDatabaseUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *X509AuthenticationDatabaseUser) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *X509AuthenticationDatabaseUser) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Array of objects where each details one unexpired database user certificate.
func (r *X509AuthenticationDatabaseUser) Certificates() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["certificates"])
}

// Contains the last X.509 certificate and private key created for a database user.
func (r *X509AuthenticationDatabaseUser) CurrentCertificate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["currentCertificate"])
}

// PEM string containing one or more customer CAs for database user authentication.
func (r *X509AuthenticationDatabaseUser) CustomerX509Cas() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["customerX509Cas"])
}

// A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
func (r *X509AuthenticationDatabaseUser) MonthsUntilExpiration() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["monthsUntilExpiration"])
}

// Identifier for the Atlas project associated with the X.509 configuration.
func (r *X509AuthenticationDatabaseUser) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Username of the database user to create a certificate for.
func (r *X509AuthenticationDatabaseUser) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering X509AuthenticationDatabaseUser resources.
type X509AuthenticationDatabaseUserState struct {
	// Array of objects where each details one unexpired database user certificate.
	Certificates interface{}
	// Contains the last X.509 certificate and private key created for a database user.
	CurrentCertificate interface{}
	// PEM string containing one or more customer CAs for database user authentication.
	CustomerX509Cas interface{}
	// A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
	MonthsUntilExpiration interface{}
	// Identifier for the Atlas project associated with the X.509 configuration.
	ProjectId interface{}
	// Username of the database user to create a certificate for.
	Username interface{}
}

// The set of arguments for constructing a X509AuthenticationDatabaseUser resource.
type X509AuthenticationDatabaseUserArgs struct {
	// PEM string containing one or more customer CAs for database user authentication.
	CustomerX509Cas interface{}
	// A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
	MonthsUntilExpiration interface{}
	// Identifier for the Atlas project associated with the X.509 configuration.
	ProjectId interface{}
	// Username of the database user to create a certificate for.
	Username interface{}
}
