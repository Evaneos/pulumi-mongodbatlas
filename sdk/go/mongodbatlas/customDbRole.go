// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `mongodbatlas_custom_db_role` provides a Custom DB Role resource. The customDBRoles resource lets you retrieve, create and modify the custom MongoDB roles in your cluster. Use custom MongoDB roles to specify custom sets of actions which cannot be described by the built-in Atlas database user privileges.
// 
// > **IMPORTANT** Custom roles cannot use actions unavailable to any cluster version in your project. Custom roles are defined at the project level, and must be compatible with each MongoDB version used by your projectâ€™s clusters. If you have a cluster in your project with MongoDB 3.4, you cannot create a custom role that uses actions introduced in MongoDB 3.6, such as useUUID.
// 
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
type CustomDbRole struct {
	s *pulumi.ResourceState
}

// NewCustomDbRole registers a new resource with the given unique name, arguments, and options.
func NewCustomDbRole(ctx *pulumi.Context,
	name string, args *CustomDbRoleArgs, opts ...pulumi.ResourceOpt) (*CustomDbRole, error) {
	if args == nil || args.Actions == nil {
		return nil, errors.New("missing required argument 'Actions'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.RoleName == nil {
		return nil, errors.New("missing required argument 'RoleName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["actions"] = nil
		inputs["inheritedRoles"] = nil
		inputs["projectId"] = nil
		inputs["roleName"] = nil
	} else {
		inputs["actions"] = args.Actions
		inputs["inheritedRoles"] = args.InheritedRoles
		inputs["projectId"] = args.ProjectId
		inputs["roleName"] = args.RoleName
	}
	s, err := ctx.RegisterResource("mongodbatlas:index/customDbRole:CustomDbRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CustomDbRole{s: s}, nil
}

// GetCustomDbRole gets an existing CustomDbRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomDbRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CustomDbRoleState, opts ...pulumi.ResourceOpt) (*CustomDbRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["actions"] = state.Actions
		inputs["inheritedRoles"] = state.InheritedRoles
		inputs["projectId"] = state.ProjectId
		inputs["roleName"] = state.RoleName
	}
	s, err := ctx.ReadResource("mongodbatlas:index/customDbRole:CustomDbRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CustomDbRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CustomDbRole) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CustomDbRole) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *CustomDbRole) Actions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["actions"])
}

func (r *CustomDbRole) InheritedRoles() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["inheritedRoles"])
}

// The unique ID for the project to create the database user.
func (r *CustomDbRole) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Name of the inherited role. This can either be another custom role or a built-in role.
func (r *CustomDbRole) RoleName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["roleName"])
}

// Input properties used for looking up and filtering CustomDbRole resources.
type CustomDbRoleState struct {
	Actions interface{}
	InheritedRoles interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// Name of the inherited role. This can either be another custom role or a built-in role.
	RoleName interface{}
}

// The set of arguments for constructing a CustomDbRole resource.
type CustomDbRoleArgs struct {
	Actions interface{}
	InheritedRoles interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// Name of the inherited role. This can either be another custom role or a built-in role.
	RoleName interface{}
}
