// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `mongodbatlas_auditing` provides an Auditing resource. This allows auditing to be created.
type Auditing struct {
	s *pulumi.ResourceState
}

// NewAuditing registers a new resource with the given unique name, arguments, and options.
func NewAuditing(ctx *pulumi.Context,
	name string, args *AuditingArgs, opts ...pulumi.ResourceOpt) (*Auditing, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["auditAuthorizationSuccess"] = nil
		inputs["auditFilter"] = nil
		inputs["enabled"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["auditAuthorizationSuccess"] = args.AuditAuthorizationSuccess
		inputs["auditFilter"] = args.AuditFilter
		inputs["enabled"] = args.Enabled
		inputs["projectId"] = args.ProjectId
	}
	inputs["configurationType"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/auditing:Auditing", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Auditing{s: s}, nil
}

// GetAuditing gets an existing Auditing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuditing(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuditingState, opts ...pulumi.ResourceOpt) (*Auditing, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["auditAuthorizationSuccess"] = state.AuditAuthorizationSuccess
		inputs["auditFilter"] = state.AuditFilter
		inputs["configurationType"] = state.ConfigurationType
		inputs["enabled"] = state.Enabled
		inputs["projectId"] = state.ProjectId
	}
	s, err := ctx.ReadResource("mongodbatlas:index/auditing:Auditing", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Auditing{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Auditing) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Auditing) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// JSON-formatted audit filter used by the project
func (r *Auditing) AuditAuthorizationSuccess() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["auditAuthorizationSuccess"])
}

// Indicates whether the auditing system captures successful authentication attempts for audit filters using the "atype" : "authCheck" auditing event. For more information, see auditAuthorizationSuccess
func (r *Auditing) AuditFilter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["auditFilter"])
}

// Denotes the configuration method for the audit filter. Possible values are: 
// * NONE - auditing not configured for the project.
// * FILTER_BUILDER - auditing configured via Atlas UI filter builder.
// * FILTER_JSON - auditing configured via Atlas custom filter or API.
func (r *Auditing) ConfigurationType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["configurationType"])
}

// Denotes whether or not the project associated with the {project_id} has database auditing enabled.
func (r *Auditing) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The unique ID for the project to configure auditing.
func (r *Auditing) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Input properties used for looking up and filtering Auditing resources.
type AuditingState struct {
	// JSON-formatted audit filter used by the project
	AuditAuthorizationSuccess interface{}
	// Indicates whether the auditing system captures successful authentication attempts for audit filters using the "atype" : "authCheck" auditing event. For more information, see auditAuthorizationSuccess
	AuditFilter interface{}
	// Denotes the configuration method for the audit filter. Possible values are: 
	// * NONE - auditing not configured for the project.
	// * FILTER_BUILDER - auditing configured via Atlas UI filter builder.
	// * FILTER_JSON - auditing configured via Atlas custom filter or API.
	ConfigurationType interface{}
	// Denotes whether or not the project associated with the {project_id} has database auditing enabled.
	Enabled interface{}
	// The unique ID for the project to configure auditing.
	ProjectId interface{}
}

// The set of arguments for constructing a Auditing resource.
type AuditingArgs struct {
	// JSON-formatted audit filter used by the project
	AuditAuthorizationSuccess interface{}
	// Indicates whether the auditing system captures successful authentication attempts for audit filters using the "atype" : "authCheck" auditing event. For more information, see auditAuthorizationSuccess
	AuditFilter interface{}
	// Denotes whether or not the project associated with the {project_id} has database auditing enabled.
	Enabled interface{}
	// The unique ID for the project to configure auditing.
	ProjectId interface{}
}
