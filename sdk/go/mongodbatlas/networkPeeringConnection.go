// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `mongodbatlas_network_peering` provides a Network Peering Connection resource. The resource lets you create, edit and delete network peering connections. The resource requires your Project ID.  Ensure you have first created a Network Container.  See the network_container resource and examples below.
// 
// > **GCP AND AZURE ONLY:** You must enable Connect via Peering Only mode to use network peering.
// 
// > **AZURE ONLY:** To create the peering request with an Azure VNET, you must grant Atlas the following permissions on the virtual network.
//     Microsoft.Network/virtualNetworks/virtualNetworkPeerings/read
//     Microsoft.Network/virtualNetworks/virtualNetworkPeerings/write
//     Microsoft.Network/virtualNetworks/virtualNetworkPeerings/delete
//     Microsoft.Network/virtualNetworks/peer/action
// For more information see https://docs.atlas.mongodb.com/security-vpc-peering/
// 
// > **Create a Whitelist:** Ensure you whitelist the private IP ranges of the subnets in which your application is hosted in order to connect to your Atlas cluster.  See the project_ip_whitelist resource.
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
type NetworkPeeringConnection struct {
	s *pulumi.ResourceState
}

// NewNetworkPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewNetworkPeeringConnection(ctx *pulumi.Context,
	name string, args *NetworkPeeringConnectionArgs, opts ...pulumi.ResourceOpt) (*NetworkPeeringConnection, error) {
	if args == nil || args.ContainerId == nil {
		return nil, errors.New("missing required argument 'ContainerId'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.ProviderName == nil {
		return nil, errors.New("missing required argument 'ProviderName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accepterRegionName"] = nil
		inputs["atlasCidrBlock"] = nil
		inputs["atlasGcpProjectId"] = nil
		inputs["atlasVpcName"] = nil
		inputs["awsAccountId"] = nil
		inputs["azureDirectoryId"] = nil
		inputs["azureSubscriptionId"] = nil
		inputs["containerId"] = nil
		inputs["gcpProjectId"] = nil
		inputs["networkName"] = nil
		inputs["projectId"] = nil
		inputs["providerName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["routeTableCidrBlock"] = nil
		inputs["vnetName"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["accepterRegionName"] = args.AccepterRegionName
		inputs["atlasCidrBlock"] = args.AtlasCidrBlock
		inputs["atlasGcpProjectId"] = args.AtlasGcpProjectId
		inputs["atlasVpcName"] = args.AtlasVpcName
		inputs["awsAccountId"] = args.AwsAccountId
		inputs["azureDirectoryId"] = args.AzureDirectoryId
		inputs["azureSubscriptionId"] = args.AzureSubscriptionId
		inputs["containerId"] = args.ContainerId
		inputs["gcpProjectId"] = args.GcpProjectId
		inputs["networkName"] = args.NetworkName
		inputs["projectId"] = args.ProjectId
		inputs["providerName"] = args.ProviderName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["routeTableCidrBlock"] = args.RouteTableCidrBlock
		inputs["vnetName"] = args.VnetName
		inputs["vpcId"] = args.VpcId
	}
	inputs["atlasId"] = nil
	inputs["connectionId"] = nil
	inputs["errorMessage"] = nil
	inputs["errorState"] = nil
	inputs["errorStateName"] = nil
	inputs["peerId"] = nil
	inputs["status"] = nil
	inputs["statusName"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/networkPeeringConnection:NetworkPeeringConnection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkPeeringConnection{s: s}, nil
}

// GetNetworkPeeringConnection gets an existing NetworkPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkPeeringConnectionState, opts ...pulumi.ResourceOpt) (*NetworkPeeringConnection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accepterRegionName"] = state.AccepterRegionName
		inputs["atlasCidrBlock"] = state.AtlasCidrBlock
		inputs["atlasGcpProjectId"] = state.AtlasGcpProjectId
		inputs["atlasId"] = state.AtlasId
		inputs["atlasVpcName"] = state.AtlasVpcName
		inputs["awsAccountId"] = state.AwsAccountId
		inputs["azureDirectoryId"] = state.AzureDirectoryId
		inputs["azureSubscriptionId"] = state.AzureSubscriptionId
		inputs["connectionId"] = state.ConnectionId
		inputs["containerId"] = state.ContainerId
		inputs["errorMessage"] = state.ErrorMessage
		inputs["errorState"] = state.ErrorState
		inputs["errorStateName"] = state.ErrorStateName
		inputs["gcpProjectId"] = state.GcpProjectId
		inputs["networkName"] = state.NetworkName
		inputs["peerId"] = state.PeerId
		inputs["projectId"] = state.ProjectId
		inputs["providerName"] = state.ProviderName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["routeTableCidrBlock"] = state.RouteTableCidrBlock
		inputs["status"] = state.Status
		inputs["statusName"] = state.StatusName
		inputs["vnetName"] = state.VnetName
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("mongodbatlas:index/networkPeeringConnection:NetworkPeeringConnection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkPeeringConnection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkPeeringConnection) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkPeeringConnection) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
func (r *NetworkPeeringConnection) AccepterRegionName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accepterRegionName"])
}

// Unique identifier for an Azure AD directory.
func (r *NetworkPeeringConnection) AtlasCidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["atlasCidrBlock"])
}

// The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
func (r *NetworkPeeringConnection) AtlasGcpProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["atlasGcpProjectId"])
}

func (r *NetworkPeeringConnection) AtlasId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["atlasId"])
}

// The Atlas VPC Name is used by your atlas clister that it is need to set up the reciprocal connection.
func (r *NetworkPeeringConnection) AtlasVpcName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["atlasVpcName"])
}

// Account ID of the owner of the peer VPC.
func (r *NetworkPeeringConnection) AwsAccountId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["awsAccountId"])
}

// Unique identifier for an Azure AD directory.
func (r *NetworkPeeringConnection) AzureDirectoryId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["azureDirectoryId"])
}

// Unique identifer of the Azure subscription in which the VNet resides.
func (r *NetworkPeeringConnection) AzureSubscriptionId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["azureSubscriptionId"])
}

// Unique identifier for the peering connection.
func (r *NetworkPeeringConnection) ConnectionId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["connectionId"])
}

// Unique identifier of the Atlas VPC container for the region. You can create an Atlas VPC container using the Create Container endpoint. You cannot create more than one container per region. To retrieve a list of container IDs, use the Get list of VPC containers endpoint.
func (r *NetworkPeeringConnection) ContainerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["containerId"])
}

// When `"status" : "FAILED"`, Atlas provides a description of the error.
func (r *NetworkPeeringConnection) ErrorMessage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["errorMessage"])
}

// Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
func (r *NetworkPeeringConnection) ErrorState() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["errorState"])
}

// Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
func (r *NetworkPeeringConnection) ErrorStateName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["errorStateName"])
}

// GCP project ID of the owner of the network peer.
func (r *NetworkPeeringConnection) GcpProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gcpProjectId"])
}

// Name of the network peer to which Atlas connects.
func (r *NetworkPeeringConnection) NetworkName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkName"])
}

// The Network Peering Container ID.
func (r *NetworkPeeringConnection) PeerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["peerId"])
}

// The unique ID for the project to create the database user.
func (r *NetworkPeeringConnection) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Cloud provider for this VPC peering connection. (Possible Values `AWS`, `AZURE`, `GCP`).
func (r *NetworkPeeringConnection) ProviderName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["providerName"])
}

// Name of your Azure resource group.
func (r *NetworkPeeringConnection) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Peer VPC CIDR block or subnet.
func (r *NetworkPeeringConnection) RouteTableCidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["routeTableCidrBlock"])
}

// Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.
func (r *NetworkPeeringConnection) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
func (r *NetworkPeeringConnection) StatusName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["statusName"])
}

// Name of your Azure VNet.
func (r *NetworkPeeringConnection) VnetName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vnetName"])
}

// Unique identifier of the peer VPC.
func (r *NetworkPeeringConnection) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering NetworkPeeringConnection resources.
type NetworkPeeringConnectionState struct {
	// Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
	AccepterRegionName interface{}
	// Unique identifier for an Azure AD directory.
	AtlasCidrBlock interface{}
	// The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
	AtlasGcpProjectId interface{}
	AtlasId interface{}
	// The Atlas VPC Name is used by your atlas clister that it is need to set up the reciprocal connection.
	AtlasVpcName interface{}
	// Account ID of the owner of the peer VPC.
	AwsAccountId interface{}
	// Unique identifier for an Azure AD directory.
	AzureDirectoryId interface{}
	// Unique identifer of the Azure subscription in which the VNet resides.
	AzureSubscriptionId interface{}
	// Unique identifier for the peering connection.
	ConnectionId interface{}
	// Unique identifier of the Atlas VPC container for the region. You can create an Atlas VPC container using the Create Container endpoint. You cannot create more than one container per region. To retrieve a list of container IDs, use the Get list of VPC containers endpoint.
	ContainerId interface{}
	// When `"status" : "FAILED"`, Atlas provides a description of the error.
	ErrorMessage interface{}
	// Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
	ErrorState interface{}
	// Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
	ErrorStateName interface{}
	// GCP project ID of the owner of the network peer.
	GcpProjectId interface{}
	// Name of the network peer to which Atlas connects.
	NetworkName interface{}
	// The Network Peering Container ID.
	PeerId interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// Cloud provider for this VPC peering connection. (Possible Values `AWS`, `AZURE`, `GCP`).
	ProviderName interface{}
	// Name of your Azure resource group.
	ResourceGroupName interface{}
	// Peer VPC CIDR block or subnet.
	RouteTableCidrBlock interface{}
	// Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.
	Status interface{}
	// The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
	StatusName interface{}
	// Name of your Azure VNet.
	VnetName interface{}
	// Unique identifier of the peer VPC.
	VpcId interface{}
}

// The set of arguments for constructing a NetworkPeeringConnection resource.
type NetworkPeeringConnectionArgs struct {
	// Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
	AccepterRegionName interface{}
	// Unique identifier for an Azure AD directory.
	AtlasCidrBlock interface{}
	// The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
	AtlasGcpProjectId interface{}
	// The Atlas VPC Name is used by your atlas clister that it is need to set up the reciprocal connection.
	AtlasVpcName interface{}
	// Account ID of the owner of the peer VPC.
	AwsAccountId interface{}
	// Unique identifier for an Azure AD directory.
	AzureDirectoryId interface{}
	// Unique identifer of the Azure subscription in which the VNet resides.
	AzureSubscriptionId interface{}
	// Unique identifier of the Atlas VPC container for the region. You can create an Atlas VPC container using the Create Container endpoint. You cannot create more than one container per region. To retrieve a list of container IDs, use the Get list of VPC containers endpoint.
	ContainerId interface{}
	// GCP project ID of the owner of the network peer.
	GcpProjectId interface{}
	// Name of the network peer to which Atlas connects.
	NetworkName interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// Cloud provider for this VPC peering connection. (Possible Values `AWS`, `AZURE`, `GCP`).
	ProviderName interface{}
	// Name of your Azure resource group.
	ResourceGroupName interface{}
	// Peer VPC CIDR block or subnet.
	RouteTableCidrBlock interface{}
	// Name of your Azure VNet.
	VnetName interface{}
	// Unique identifier of the peer VPC.
	VpcId interface{}
}
