// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `mongodbatlas_project` provides a Project resource. This allows project to be created.
// 
// > **IMPORTANT WARNING:**  Changing the name of an existing Project in your Terraform configuration will result the destruction of that Project and related resources (including Clusters) and the re-creation of those resources.  Terraform will inform you of the destroyed/created resources before applying so be sure to verify any change to your environment before applying.
type Project struct {
	s *pulumi.ResourceState
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOpt) (*Project, error) {
	if args == nil || args.OrgId == nil {
		return nil, errors.New("missing required argument 'OrgId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["orgId"] = nil
		inputs["teams"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["orgId"] = args.OrgId
		inputs["teams"] = args.Teams
	}
	inputs["clusterCount"] = nil
	inputs["created"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/project:Project", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectState, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clusterCount"] = state.ClusterCount
		inputs["created"] = state.Created
		inputs["name"] = state.Name
		inputs["orgId"] = state.OrgId
		inputs["teams"] = state.Teams
	}
	s, err := ctx.ReadResource("mongodbatlas:index/project:Project", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Project) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Project) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The number of Atlas clusters deployed in the project..
func (r *Project) ClusterCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["clusterCount"])
}

// The ISO-8601-formatted timestamp of when Atlas created the project..
func (r *Project) Created() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["created"])
}

// The name of the project you want to create. (Cannot be changed via this Provider after creation.)
func (r *Project) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the organization you want to create the project within.
func (r *Project) OrgId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["orgId"])
}

func (r *Project) Teams() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["teams"])
}

// Input properties used for looking up and filtering Project resources.
type ProjectState struct {
	// The number of Atlas clusters deployed in the project..
	ClusterCount interface{}
	// The ISO-8601-formatted timestamp of when Atlas created the project..
	Created interface{}
	// The name of the project you want to create. (Cannot be changed via this Provider after creation.)
	Name interface{}
	// The ID of the organization you want to create the project within.
	OrgId interface{}
	Teams interface{}
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// The name of the project you want to create. (Cannot be changed via this Provider after creation.)
	Name interface{}
	// The ID of the organization you want to create the project within.
	OrgId interface{}
	Teams interface{}
}
