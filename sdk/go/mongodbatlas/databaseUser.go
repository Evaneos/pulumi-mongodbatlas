// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `mongodbatlas_database_user` provides a Database User resource. This represents a database user which will be applied to all clusters within the project.
// 
// Each user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
// 
// > **IMPORTANT:** All arguments including the password will be stored in the raw state as plain-text. [Read more about sensitive data in state.](https://www.terraform.io/docs/state/sensitive-data.html)
type DatabaseUser struct {
	s *pulumi.ResourceState
}

// NewDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewDatabaseUser(ctx *pulumi.Context,
	name string, args *DatabaseUserArgs, opts ...pulumi.ResourceOpt) (*DatabaseUser, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authDatabaseName"] = nil
		inputs["databaseName"] = nil
		inputs["labels"] = nil
		inputs["password"] = nil
		inputs["projectId"] = nil
		inputs["roles"] = nil
		inputs["username"] = nil
		inputs["x509Type"] = nil
	} else {
		inputs["authDatabaseName"] = args.AuthDatabaseName
		inputs["databaseName"] = args.DatabaseName
		inputs["labels"] = args.Labels
		inputs["password"] = args.Password
		inputs["projectId"] = args.ProjectId
		inputs["roles"] = args.Roles
		inputs["username"] = args.Username
		inputs["x509Type"] = args.X509Type
	}
	s, err := ctx.RegisterResource("mongodbatlas:index/databaseUser:DatabaseUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseUser{s: s}, nil
}

// GetDatabaseUser gets an existing DatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseUserState, opts ...pulumi.ResourceOpt) (*DatabaseUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authDatabaseName"] = state.AuthDatabaseName
		inputs["databaseName"] = state.DatabaseName
		inputs["labels"] = state.Labels
		inputs["password"] = state.Password
		inputs["projectId"] = state.ProjectId
		inputs["roles"] = state.Roles
		inputs["username"] = state.Username
		inputs["x509Type"] = state.X509Type
	}
	s, err := ctx.ReadResource("mongodbatlas:index/databaseUser:DatabaseUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DatabaseUser) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DatabaseUser) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
func (r *DatabaseUser) AuthDatabaseName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["authDatabaseName"])
}

// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
func (r *DatabaseUser) DatabaseName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["databaseName"])
}

func (r *DatabaseUser) Labels() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["labels"])
}

// User's initial password. A value is required to create the database user, however the argument but may be removed from your Terraform configuration after user creation without impacting the user, password or Terraform management. IMPORTANT --- Passwords may show up in Terraform related logs and it will be stored in the Terraform state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of Terraform be sure to remove the argument from the Terraform configuration so it is not inadvertently updated to the original password.
func (r *DatabaseUser) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// The unique ID for the project to create the database user.
func (r *DatabaseUser) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
func (r *DatabaseUser) Roles() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["roles"])
}

// Username for authenticating to MongoDB.
func (r *DatabaseUser) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
func (r *DatabaseUser) X509Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["x509Type"])
}

// Input properties used for looking up and filtering DatabaseUser resources.
type DatabaseUserState struct {
	// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
	AuthDatabaseName interface{}
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	DatabaseName interface{}
	Labels interface{}
	// User's initial password. A value is required to create the database user, however the argument but may be removed from your Terraform configuration after user creation without impacting the user, password or Terraform management. IMPORTANT --- Passwords may show up in Terraform related logs and it will be stored in the Terraform state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of Terraform be sure to remove the argument from the Terraform configuration so it is not inadvertently updated to the original password.
	Password interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles interface{}
	// Username for authenticating to MongoDB.
	Username interface{}
	// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	X509Type interface{}
}

// The set of arguments for constructing a DatabaseUser resource.
type DatabaseUserArgs struct {
	// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
	AuthDatabaseName interface{}
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	DatabaseName interface{}
	Labels interface{}
	// User's initial password. A value is required to create the database user, however the argument but may be removed from your Terraform configuration after user creation without impacting the user, password or Terraform management. IMPORTANT --- Passwords may show up in Terraform related logs and it will be stored in the Terraform state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of Terraform be sure to remove the argument from the Terraform configuration so it is not inadvertently updated to the original password.
	Password interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles interface{}
	// Username for authenticating to MongoDB.
	Username interface{}
	// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	X509Type interface{}
}
