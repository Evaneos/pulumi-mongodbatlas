// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `mongodbatlas_global_cluster_config` provides a Global Cluster Configuration resource.
// 
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
type GlobalClusterConfiguration struct {
	s *pulumi.ResourceState
}

// NewGlobalClusterConfiguration registers a new resource with the given unique name, arguments, and options.
func NewGlobalClusterConfiguration(ctx *pulumi.Context,
	name string, args *GlobalClusterConfigurationArgs, opts ...pulumi.ResourceOpt) (*GlobalClusterConfiguration, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clusterName"] = nil
		inputs["customZoneMappings"] = nil
		inputs["managedNamespaces"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["clusterName"] = args.ClusterName
		inputs["customZoneMappings"] = args.CustomZoneMappings
		inputs["managedNamespaces"] = args.ManagedNamespaces
		inputs["projectId"] = args.ProjectId
	}
	inputs["customZoneMapping"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/globalClusterConfiguration:GlobalClusterConfiguration", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalClusterConfiguration{s: s}, nil
}

// GetGlobalClusterConfiguration gets an existing GlobalClusterConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalClusterConfiguration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GlobalClusterConfigurationState, opts ...pulumi.ResourceOpt) (*GlobalClusterConfiguration, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clusterName"] = state.ClusterName
		inputs["customZoneMapping"] = state.CustomZoneMapping
		inputs["customZoneMappings"] = state.CustomZoneMappings
		inputs["managedNamespaces"] = state.ManagedNamespaces
		inputs["projectId"] = state.ProjectId
	}
	s, err := ctx.ReadResource("mongodbatlas:index/globalClusterConfiguration:GlobalClusterConfiguration", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalClusterConfiguration{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GlobalClusterConfiguration) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GlobalClusterConfiguration) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *GlobalClusterConfiguration) ClusterName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["clusterName"])
}

// A map of all custom zone mappings defined for the Global Cluster. Atlas automatically maps each location code to the closest geographical zone. Custom zone mappings allow administrators to override these automatic mappings. If your Global Cluster does not have any custom zone mappings, this document is empty.
func (r *GlobalClusterConfiguration) CustomZoneMapping() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["customZoneMapping"])
}

// Each element in the list maps one ISO location code to a zone in your Global Cluster. See Custom Zone Mapping below for more details.
func (r *GlobalClusterConfiguration) CustomZoneMappings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["customZoneMappings"])
}

// Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.
func (r *GlobalClusterConfiguration) ManagedNamespaces() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["managedNamespaces"])
}

// The unique ID for the project to create the database user.
// * `cluster_name - (Required) The name of the Global Cluster.
func (r *GlobalClusterConfiguration) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Input properties used for looking up and filtering GlobalClusterConfiguration resources.
type GlobalClusterConfigurationState struct {
	ClusterName interface{}
	// A map of all custom zone mappings defined for the Global Cluster. Atlas automatically maps each location code to the closest geographical zone. Custom zone mappings allow administrators to override these automatic mappings. If your Global Cluster does not have any custom zone mappings, this document is empty.
	CustomZoneMapping interface{}
	// Each element in the list maps one ISO location code to a zone in your Global Cluster. See Custom Zone Mapping below for more details.
	CustomZoneMappings interface{}
	// Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.
	ManagedNamespaces interface{}
	// The unique ID for the project to create the database user.
	// * `cluster_name - (Required) The name of the Global Cluster.
	ProjectId interface{}
}

// The set of arguments for constructing a GlobalClusterConfiguration resource.
type GlobalClusterConfigurationArgs struct {
	ClusterName interface{}
	// Each element in the list maps one ISO location code to a zone in your Global Cluster. See Custom Zone Mapping below for more details.
	CustomZoneMappings interface{}
	// Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.
	ManagedNamespaces interface{}
	// The unique ID for the project to create the database user.
	// * `cluster_name - (Required) The name of the Global Cluster.
	ProjectId interface{}
}
