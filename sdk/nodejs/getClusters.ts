// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `mongodbatlas_cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
 * 
 * > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
 * 
 * > **IMPORTANT:**
 * <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
 * <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 * 
 * const testCluster = new mongodbatlas.Cluster("test", {
 *     autoScalingDiskGbEnabled: true,
 *     backupEnabled: true,
 *     diskSizeGb: 100,
 *     numShards: 1,
 *     projectId: "<YOUR-PROJECT-ID>",
 *     providerDiskIops: 300,
 *     providerEncryptEbsVolume: true,
 *     providerInstanceSizeName: "M40",
 *     //Provider Settings "block"
 *     providerName: "AWS",
 *     providerRegionName: "US_EAST_1",
 *     providerVolumeType: "STANDARD",
 *     replicationFactor: 3,
 * });
 * const testClusters = mongodbatlas.getClusters({
 *     "mongodbatlas_cluster.test.project_id": [{}], // To get dependency.
 *     projectId: "",
 * });
 * ```
 */
export function getClusters(args: GetClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetClustersResult> {
    return pulumi.runtime.invoke("mongodbatlas:index/getClusters:getClusters", {
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersArgs {
    /**
     * The unique ID for the project to get the clusters.
     */
    readonly projectId: string;
}

/**
 * A collection of values returned by getClusters.
 */
export interface GetClustersResult {
    readonly plugin: { name: string, version: string };
    readonly projectId: string;
    /**
     * A list where each represents a Cluster. See Cluster below for more details.
     */
    readonly results: { autoScalingDiskGbEnabled: boolean, backingProviderName: string, backupEnabled: boolean, biConnector: { enabled: string, readPreference: string }, clusterType: string, diskSizeGb: number, encryptionAtRestProvider: string, labels: { key: string, value: string }[], mongoDbMajorVersion: string, mongoDbVersion: string, mongoUri: string, mongoUriUpdated: string, mongoUriWithOptions: string, name: string, numShards: number, paused: boolean, pitEnabled: boolean, providerBackupEnabled: boolean, providerDiskIops: number, providerDiskTypeName: string, providerEncryptEbsVolume: boolean, providerInstanceSizeName: string, providerName: string, providerRegionName: string, providerVolumeType: string, replicationFactor: number, replicationSpecs: { id: string, numShards: number, regionsConfigs: { analyticsNodes: number, electableNodes: number, priority: number, readOnlyNodes: number, regionName: string }[], zoneName: string }[], srvAddress: string, stateName: string }[];
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
