# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class CloudProviderSnapshotRestoreJob(pulumi.CustomResource):
    cancelled: pulumi.Output[bool]
    """
    Indicates whether the restore job was canceled.
    """
    cluster_name: pulumi.Output[str]
    """
    The name of the Atlas cluster whose snapshot you want to restore.
    """
    created_at: pulumi.Output[str]
    """
    UTC ISO 8601 formatted point in time when Atlas created the restore job.
    """
    delivery_type: pulumi.Output[dict]
    """
    Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.
    """
    delivery_urls: pulumi.Output[list]
    """
    One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
    """
    expired: pulumi.Output[bool]
    """
    Indicates whether the restore job expired.
    """
    expires_at: pulumi.Output[str]
    """
    UTC ISO 8601 formatted point in time when the restore job expires.
    """
    finished_at: pulumi.Output[str]
    """
    UTC ISO 8601 formatted point in time when the restore job completed.
    """
    project_id: pulumi.Output[str]
    """
    The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
    """
    snapshot_id: pulumi.Output[str]
    """
    Unique identifier of the snapshot to restore.
    """
    snapshot_restore_job_id: pulumi.Output[str]
    """
    The unique identifier of the restore job.
    """
    timestamp: pulumi.Output[str]
    """
    Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
    """
    def __init__(__self__, resource_name, opts=None, cluster_name=None, delivery_type=None, project_id=None, snapshot_id=None, __name__=None, __opts__=None):
        """
        `mongodbatlas_cloud_provider_snapshot_restore_job` provides a resource to create a new restore job from a cloud provider snapshot of a specified cluster. The restore job can be one of two types: 
        * **automated:** Atlas automatically restores the snapshot with snapshotId to the Atlas cluster with name targetClusterName in the Atlas project with targetGroupId.
        
        * **download:** Atlas provides a URL to download a .tar.gz of the snapshot with snapshotId. The contents of the archive contain the data files for your Atlas cluster.
        
        > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster whose snapshot you want to restore.
        :param pulumi.Input[dict] delivery_type: Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
        :param pulumi.Input[str] snapshot_id: Unique identifier of the snapshot to restore.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if cluster_name is None:
            raise TypeError("Missing required property 'cluster_name'")
        __props__['cluster_name'] = cluster_name

        if delivery_type is None:
            raise TypeError("Missing required property 'delivery_type'")
        __props__['delivery_type'] = delivery_type

        if project_id is None:
            raise TypeError("Missing required property 'project_id'")
        __props__['project_id'] = project_id

        if snapshot_id is None:
            raise TypeError("Missing required property 'snapshot_id'")
        __props__['snapshot_id'] = snapshot_id

        __props__['cancelled'] = None
        __props__['created_at'] = None
        __props__['delivery_urls'] = None
        __props__['expired'] = None
        __props__['expires_at'] = None
        __props__['finished_at'] = None
        __props__['snapshot_restore_job_id'] = None
        __props__['timestamp'] = None

        super(CloudProviderSnapshotRestoreJob, __self__).__init__(
            'mongodbatlas:index/cloudProviderSnapshotRestoreJob:CloudProviderSnapshotRestoreJob',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

